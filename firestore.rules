rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Official events collection
    match /events/{eventId} {
      allow read: if true;
      allow create, delete: if false; // Only Cloud Functions can create/delete
      // Allow authenticated users to update only attendeeCount and signalStrength (for joining)
      allow update: if request.auth != null
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendeeCount', 'signalStrength']);
    }
    
    // User-created events collection
    match /userEvents/{eventId} {
      // Anyone can read events
      allow read: if true;
      
      // Authenticated users (including anonymous) can create events
      allow create: if request.auth != null
                    && request.resource.data.hostId == request.auth.uid;
      
      // Users can only delete their own events (including anonymous users)
      allow delete: if request.auth != null
                    && resource.data.hostId == request.auth.uid;
      
      // Users can update their own events OR update attendeeCount/signalStrength when joining
      allow update: if request.auth != null && (
        // Host can update their own events
        resource.data.hostId == request.auth.uid
        // OR anyone can update only attendeeCount and signalStrength (for joining)
        || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendeeCount', 'signalStrength']))
      );
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read any user profile
      allow read: if true;
      
      // Users can only write their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow Cloud Functions (no auth) to update notification cooldowns only
      allow update: if request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['notificationCooldowns', 'lastNotificationSent']);
    }
    
    // Signals collection (event attendance)
    match /signals/{signalId} {
      // Anyone can read signals
      allow read: if true;
      
      // Authenticated users can create/update/delete their own signals
      allow create, update, delete: if request.auth != null;
    }
    
    // Event chat messages collection
    match /eventChats/{eventId}/messages/{messageId} {
      // Authenticated users can read messages
      allow read: if request.auth != null;
      
      // Authenticated users can create messages (including anonymous users)
      // Allow if user is authenticated and the userId matches the auth uid
      allow create: if request.auth != null
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.keys().hasAll(['userId', 'userName', 'text', 'timestamp']);
      
      // Users can only update/delete their own messages
      allow update, delete: if request.auth != null
                            && resource.data.userId == request.auth.uid;
    }
    
    // Campus events live collection (read-only for users)
    match /campus_events_live/{eventId} {
      allow read: if true;
      allow write: if false; // Only Cloud Functions can write
    }
    
    // User attendances collection (tracking which events users are attending)
    match /userAttendances/{attendanceId} {
      // Authenticated users can read attendances
      allow read: if request.auth != null;
      
      // Authenticated users can create their own attendances
      allow create: if request.auth != null
                    && request.resource.data.userId == request.auth.uid;
      
      // Users can only delete their own attendances
      allow delete: if request.auth != null
                    && resource.data.userId == request.auth.uid;
      
      // No updates allowed (create/delete only)
      allow update: if false;
    }
  }
}

